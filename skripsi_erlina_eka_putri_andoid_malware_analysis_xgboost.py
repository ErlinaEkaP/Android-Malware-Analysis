# -*- coding: utf-8 -*-
"""SKRIPSI Erlina Eka Putri_Andoid Malware Analysis XGBoost.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nWWQ-TFVkTXVaSOMiSj0tCeV4SxOBUAq

##Data Uji XGBOOST
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import seaborn as sns
from sklearn.model_selection import train_test_split
from xgboost import XGBClassifier
from sklearn.metrics import classification_report

import pandas as pd
df = pd.read_csv("https://raw.githubusercontent.com/ErlinaEkaP/Android-Malware-Analysis/main/train.csv", sep=";")

df.shape

#df[df['type']==1].count

#df[df['type']==0].count

def annot_plot(ax,w,h):
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    for p in ax.patches:
        ax.annotate('{0:.1f}'.format(p.get_height()), (p.get_x()+w, p.get_height()+h))

import matplotlib.pyplot as plt
import seaborn as sns

ax = sns.countplot('type',data = df)
annot_plot(ax, 0.5, 1)

#menghapus beberapa kelas tidak digunakan
X = df.drop(['type'], axis = 1).values
y = df['type'].values

y

X.shape

y.shape

"""#Train Split"""

from sklearn.model_selection import train_test_split
import sklearn.metrics as metrics
from sklearn.metrics import accuracy_score,roc_auc_score,precision_score, recall_score,f1_score,classification_report

X_train, X_test, y_train, y_test = train_test_split(X, y ,test_size=0.2, random_state=12)

print(X_train.shape, y_train.shape)
print(X_test.shape, y_test.shape)

print(X_train.shape)
print(y_test.shape)

#df

print(X.shape)
print(y.shape)

print(X_train.shape, y_train.shape)
print(X_test.shape, y_test.shape)

"""#XGBoost"""

from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
import sklearn.metrics as metrics

# fit model training data = melatih model
model = XGBClassifier()
model.fit(X_train, y_train)

"""#hasil dari evaluasi presisi recall akurasi, dan classification report"""

y_pred = model.predict(X_test)
predictions = [round(value) for value in y_pred]

accuracy = accuracy_score(y_test, predictions)
print("Accuracy: %.2f%%" % (accuracy * 100.0))

precision = precision_score(y_test, predictions)
print("Precision : %.2f%%" % (precision * 100.0))

recall = recall_score(y_test, y_pred)
print("Recall : %.2f%%" % (recall *100.0))


#F1 SCORE

f1score = f1_score(y_test,y_pred, average='macro')
print("F1 Score : ",f1score )

c_matrix = pd.crosstab(y_test, y_pred, rownames=['Actual'], colnames=['Predicted'])
fig, (ax1) = plt.subplots(ncols=1, figsize=(5,5))

sns.heatmap(pd.DataFrame(c_matrix), annot=True, cmap="Blues" ,fmt='g',
            xticklabels=['APK Jinak', 'Malware'],
            yticklabels=['APK Jinak', 'Malware'],)
ax1.xaxis.set_label_position("top")
plt.tight_layout()
plt.title('Confusion Matrix', y=1.1,fontsize=14)
plt.show()

from sklearn.metrics import classification_report
ypred = model.predict(X_test)
print(classification_report(y_test, ypred))